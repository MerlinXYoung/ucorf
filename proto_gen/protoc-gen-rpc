#!/usr/bin/python

from descriptor_pb2 import *
from plugin_pb2 import *
import sys, os

def Log(s):
    f = open('log', 'a+')
    f.write('%s\n' % s)
    f.close()

#Log('-------------start-------------')

s = sys.stdin.read()
#Log('stdin %s bytes' % len(s))

gen_req = CodeGeneratorRequest()
gen_req.ParseFromString(s)
gen_rsp = CodeGeneratorResponse()

indent_content='    '
class C:
    def __init__(self):
        self.c = ''
        self.idt = 0

    def it(self):
        self.idt += 1
        return self

    def it_end(self):
        self.idt -= 1
        return self

    def out(self, info):
        self.c += info
        return self

    def outline(self, info = ''):
        if not info:
            self.c += '\n'
            return self

        self.c += indent_content * self.idt + info + '\n'
        return self

    def itf(self):
        return self.outline('{').it()

    def itf_end(self):
        return self.it_end().outline('}')

def Gen(filename, parameter):
    ori_filename = os.path.splitext(filename)[0]
    f = gen_rsp.file.add()

    ############### *.rpc.h ##############
    f.name = ori_filename + '.rpc.h'
    c = C()
    c.outline('#include <ucorf/pb_service.h>')
    c.outline('#include "%s.pb.h"' % ori_filename)
    c.outline()
    c.out('namespace ucorf {')
    if parameter.package:
        c.out(' namespace %s' % parameter.package)
    c.outline()
    c.outline('{')

    c.it()
    c.outline('using namespace ::google::protobuf;')
    c.outline()
    # services
    for srv in parameter.service:
        srv_name = srv.name
        # Service
        c.outline('class %s : public Pb_Service' % srv_name)
        c.outline('{')
        c.outline('public:')
        c.it()
        c.outline('%s();' % srv_name)
        c.outline()
        c.outline('virtual std::string name();')
        c.outline()
        c.outline('virtual const ServiceDescriptor* GetDescriptor();')
        # methods
        for method in srv.method:
            m_name = method.name
            input_t = method.input_type.split('.')[-1]
            output_t = method.output_type.split('.')[-1]
            c.outline()
            c.outline('virtual bool %s(%s & request, %s * response) = 0;' % \
                (m_name, input_t, output_t));
        c.it_end()
        c.outline('};')
        c.outline()
        # Stub
        c.outline('class %sStub : public Pb_ServiceStub' % srv_name)
        c.outline('{')
        c.outline('public:')
        c.it()
        c.outline('explicit %sStub(Client * c);' % srv_name)
        c.outline()
        c.outline('virtual std::string name();')
        # methods
        for method in srv.method:
            m_name = method.name
            input_t = method.input_type.split('.')[-1]
            output_t = method.output_type.split('.')[-1]
            c.outline()
            c.outline('virtual std::shared_ptr<%s> %s(%s & request, boost_ec * ec = nullptr);' %\
                    (output_t, m_name, input_t))
            c.outline()
            c.outline('virtual boost_ec %s(%s & request, %s * response);' %\
                    (m_name, input_t, output_t))
        c.it_end()
        c.outline('};')

    c.it_end()
    if parameter.package:
        c.out('}')
    c.out('}')
    c.outline()
    f.content += c.c

    ############### *.rpc.cc ##############
    f = gen_rsp.file.add()
    f.name = ori_filename + '.rpc.cc'
    c = C()
    c.outline('#include "%s.rpc.h"' % ori_filename)
    c.outline()
    c.outline('namespace Echo {')
    c.it()
    c.outline('namespace {')
    c.it()
    for srv in parameter.service:
        c.outline('extern const ::google::protobuf::ServiceDescriptor* %s_descriptor_;' % srv.name)
    c.it_end()
    c.outline('}')
    c.it_end()
    c.outline('}')
    c.outline()

    c.out('namespace ucorf {')
    if parameter.package:
        c.out(' namespace %s' % parameter.package)
    c.outline()
    c.outline('{')
    c.it()
    # services
    for srv in parameter.service:
        srv_name = srv.name
        c.outline('%s::%s()' % (srv_name, srv_name))
        c.itf()
        # methods
        for method in srv.method:
            c.outline('methods_.push_back(&%s::%s);' % (srv_name, method.name))
        c.itf_end().outline()

        c.outline('std::string %s::name()' % srv_name).itf()
        c.outline('return "%s";' % srv_name).itf_end().outline()

        c.outline('const ServiceDescriptor* %s::GetDescriptor()' % srv_name)
        c.itf().outline('return ::%s::%s_descriptor_;' % (parameter.package, srv_name))
        c.itf_end().outline()

        c.outline('%sStub::%sStub(Client * c)' % (srv_name, srv_name))
        c.it().outline(': Pb_ServiceStub(c) {}').it_end().outline()

        c.outline('std::string %sStub::name()' % srv_name)
        c.itf().outline('return "%s";' % srv_name).itf_end().outline()

        # methods
        for method in srv.method:
            m_name = method.name
            input_t = method.input_type.split('.')[-1]
            output_t = method.output_type.split('.')[-1]
            c.outline('std::shared_ptr<%s> %sStub::%s(%s & request, boost_ec * ec)' %\
                    (output_t, srv_name, m_name, input_t))
            c.itf()
            c.outline('std::shared_ptr<%s> response = std::make_shared<%s>();' % (output_t, output_t))
            c.outline('boost_ec e = CallMethod("%s", request, response.get());' % m_name)
            c.outline('if (ec) {')
            c.it().outline('if (e) *ec = e;').outline('else ec->clear();').it_end().outline('}')
            c.outline().outline('return response;')
            c.itf_end().outline()

            c.outline('boost_ec %s(%s & request, %s * response)' %\
                    (m_name, input_t, output_t))
            c.itf().outline('return CallMethod("%s", request, response);' % m_name).itf_end().outline()
    c.it_end()
    if parameter.package:
        c.out('}')
    c.out('}')
    c.outline()
    f.content += c.c


for idx in range(len(gen_req.file_to_generate)):
    Gen(gen_req.file_to_generate[idx], gen_req.proto_file[idx])

sys.stdout.write(gen_rsp.SerializeToString())
